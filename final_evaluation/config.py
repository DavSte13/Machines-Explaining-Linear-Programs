import torch
import numpy as np
"""
This file contains the configs for all evaluation runs.
"""

# ================= Basic Linear Program =================
# baselines for integrated gradients which occur in multiple cases:
c1_active_base = (torch.tensor([[0.1, 0.1], [0.2, 0.1]], requires_grad=True),
                  torch.tensor([0.8, 1.], requires_grad=True),
                  torch.tensor([0.1, 0.2], requires_grad=True))
c2_active_base = (torch.tensor([[0.1, 0.1], [0.2, 0.15]], requires_grad=True),
                  torch.tensor([1., 1.], requires_grad=True),
                  torch.tensor([0.1, 0.2], requires_grad=True))
both_active_base = (torch.tensor([[0.1, 0.225], [0.2, 0.1]], requires_grad=True),
                    torch.tensor([1., 1.], requires_grad=True),
                    torch.tensor([0.1, 0.2], requires_grad=True))

BLP_CASE1 = {
    'input': (
        torch.tensor([[1., 1.], [2., 1.]], requires_grad=True),
        torch.tensor([8., 10.], requires_grad=True),
        torch.tensor([1., 2.], requires_grad=True)
    ),
    'info': "Only constraint 1 is active",
    'num_of_bases': 4,
    'base0': (torch.tensor([[0.01, 0.01], [0.02, 0.01]], requires_grad=True),
              torch.tensor([0.08, 0.1], requires_grad=True),
              torch.tensor([0.01, 0.02], requires_grad=True)),
    'base1': c1_active_base,
    'base2': c2_active_base,
    'base3': both_active_base,
}

BLP_CASE2 = {
    'input': (
        torch.tensor([[1., 1.], [2., 1.5]], requires_grad=True),
        torch.tensor([10., 10.], requires_grad=True),
        torch.tensor([1., 2.], requires_grad=True)
    ),
    'info': "Only constraint 2 is active",
    'num_of_bases': 4,
    'base0': (torch.tensor([[0.01, 0.01], [0.02, 0.015]], requires_grad=True),
              torch.tensor([0.1, 0.1], requires_grad=True),
              torch.tensor([0.01, 0.02], requires_grad=True)),
    'base1': c1_active_base,
    'base2': c2_active_base,
    'base3': both_active_base,
}

BLP_CASE3 = {
    'input': (
        torch.tensor([[1., 2.25], [2., 1.]], requires_grad=True),
        torch.tensor([10., 10.], requires_grad=True),
        torch.tensor([1., 2.], requires_grad=True)
    ),
    'info': "Both constraints are active, unique optimal solution",
    'num_of_bases': 4,
    'base0': (torch.tensor([[0.01, 0.0225], [0.02, 0.01]], requires_grad=True),
              torch.tensor([0.1, 0.1], requires_grad=True),
              torch.tensor([0.01, 0.02], requires_grad=True)),
    'base1': c1_active_base,
    'base2': c2_active_base,
    'base3': both_active_base,
}

BLP_CASE4 = {
    'input': (
        torch.tensor([[1., 1.], [2., 1.]], requires_grad=True),
        torch.tensor([10., 10.], requires_grad=True),
        torch.tensor([1., 2.], requires_grad=True)
    ),
    'info': "Both constraints are active, optimal solution at intersection with x2 axis",
    'num_of_bases': 4,
    'base0': (torch.tensor([[0.01, 0.01], [0.02, 0.01]], requires_grad=True),
              torch.tensor([0.1, 0.1], requires_grad=True),
              torch.tensor([0.01, 0.02], requires_grad=True)),
    'base1': c1_active_base,
    'base2': c2_active_base,
    'base3': both_active_base,
}

BLP_CASE5 = {
    'input': (
        torch.tensor([[1., 2.], [2., 1.]], requires_grad=True),
        torch.tensor([10., 10.], requires_grad=True),
        torch.tensor([1., 2.], requires_grad=True)
    ),
    'info': "More than one optimal solution",
    'num_of_bases': 4,
    'base0': (torch.tensor([[0.01, 0.02], [0.02, 0.01]], requires_grad=True),
              torch.tensor([0.1, 0.1], requires_grad=True),
              torch.tensor([0.01, 0.02], requires_grad=True)),
    'base1': c1_active_base,
    'base2': c2_active_base,
    'base3': both_active_base,
}

BLP_CASES = [BLP_CASE1, BLP_CASE2, BLP_CASE3, BLP_CASE4, BLP_CASE5]


# ================= Maximum Flow Problem =================
# baselines for integrated gradients which occur in multiple cases:
all_same_base = (np.arange(5),
                 np.array([(0, 1, {'w': 0.01}), (0, 2, {'w': 0.01}), (1, 2, {'w': 0.01}), (1, 3, {'w': 0.01}),
                           (2, 3, {'w': 0.01}), (2, 4, {'w': 0.01}), (3, 4, {'w': 0.01})])
                 )


MF_CASE1 = {
    'input': (
        np.arange(5),
        np.array([(0, 1, {'w': 0.8}), (0, 2, {'w': 0.2}), (1, 2, {'w': 0.6}), (1, 3, {'w': 0.1}), (2, 3, {'w': 0.4}),
                  (2, 4, {'w': 0.4}), (3, 4, {'w': 0.5})])
    ),
    'info': "Small graph without bottleneck",
    'num_of_bases': 2,
    'base0': (np.arange(5),
              np.array([(0, 1, {'w': 0.008}), (0, 2, {'w': 0.002}), (1, 2, {'w': 0.006}), (1, 3, {'w': 0.001}),
                        (2, 3, {'w': 0.004}), (2, 4, {'w': 0.004}), (3, 4, {'w': 0.005})])
              ),
    'base1': all_same_base,

}

MF_CASE2 = {
    'input': (
        np.arange(5),
        np.array([(0, 1, {'w': 0.8}), (0, 2, {'w': 0.2}), (1, 2, {'w': 0.6}), (1, 3, {'w': 0.3}), (2, 3, {'w': 0.4}),
                  (2, 4, {'w': 0.2}), (3, 4, {'w': 0.3})])
    ),
    'info': "Small graph with bottleneck at the end",
    'num_of_bases': 2,
    'base0': (np.arange(5),
              np.array([(0, 1, {'w': 0.008}), (0, 2, {'w': 0.002}), (1, 2, {'w': 0.006}), (1, 3, {'w': 0.003}),
                        (2, 3, {'w': 0.004}), (2, 4, {'w': 0.002}), (3, 4, {'w': 0.003})])
              ),
    'base1': all_same_base,
}

MF_CASE3 = {
    'input': (
        np.arange(20),
        np.array(
        [(0, 2, {'w': 0.031}), (0, 3, {'w': 0.636}), (0, 4, {'w': 0.314}), (0, 8, {'w': 0.509}), (0, 10, {'w': 0.908}),
         (0, 11, {'w': 0.249}), (0, 13, {'w': 0.41}), (0, 14, {'w': 0.756}), (0, 17, {'w': 0.229}),
         (1, 0, {'w': 0.077}), (1, 5, {'w': 0.29}), (1, 8, {'w': 0.161}), (1, 9, {'w': 0.93}), (2, 4, {'w': 0.808}),
         (2, 5, {'w': 0.633}), (2, 6, {'w': 0.871}), (2, 7, {'w': 0.804}), (2, 8, {'w': 0.187}), (2, 9, {'w': 0.893}),
         (2, 10, {'w': 0.539}), (2, 14, {'w': 0.807}), (2, 15, {'w': 0.896}), (2, 19, {'w': 0.318}),
         (3, 1, {'w': 0.11}), (3, 10, {'w': 0.228}), (3, 11, {'w': 0.427}), (3, 13, {'w': 0.818}),
         (3, 14, {'w': 0.861}), (4, 2, {'w': 0.007}), (4, 3, {'w': 0.511}), (4, 6, {'w': 0.417}), (4, 10, {'w': 0.222}),
         (4, 13, {'w': 0.12}), (4, 14, {'w': 0.338}), (4, 15, {'w': 0.943}), (4, 19, {'w': 0.323}),
         (5, 6, {'w': 0.519}), (5, 10, {'w': 0.703}), (5, 12, {'w': 0.364}), (5, 17, {'w': 0.972}),
         (5, 19, {'w': 0.962}), (6, 2, {'w': 0.252}), (6, 5, {'w': 0.497}), (6, 11, {'w': 0.301}),
         (6, 13, {'w': 0.285}), (6, 18, {'w': 0.037}), (7, 1, {'w': 0.61}), (7, 3, {'w': 0.503}), (7, 6, {'w': 0.051}),
         (7, 10, {'w': 0.279}), (7, 13, {'w': 0.908}), (7, 16, {'w': 0.24}), (8, 2, {'w': 0.145}), (8, 3, {'w': 0.489}),
         (8, 6, {'w': 0.986}), (8, 7, {'w': 0.242}), (8, 9, {'w': 0.672}), (8, 11, {'w': 0.762}), (8, 14, {'w': 0.238}),
         (8, 15, {'w': 0.728}), (8, 17, {'w': 0.368}), (8, 18, {'w': 0.632}), (9, 4, {'w': 0.634}),
         (9, 5, {'w': 0.536}), (9, 13, {'w': 0.09}), (9, 17, {'w': 0.835}), (9, 18, {'w': 0.321}),
         (10, 1, {'w': 0.187}), (10, 2, {'w': 0.041}), (10, 7, {'w': 0.591}), (10, 14, {'w': 0.678}),
         (10, 16, {'w': 0.017}), (10, 18, {'w': 0.512}), (11, 1, {'w': 0.226}), (11, 9, {'w': 0.645}),
         (11, 10, {'w': 0.174}), (11, 16, {'w': 0.691}), (12, 0, {'w': 0.387}), (12, 2, {'w': 0.937}),
         (12, 3, {'w': 0.138}), (12, 6, {'w': 0.341}), (12, 7, {'w': 0.113}), (12, 9, {'w': 0.925}),
         (12, 17, {'w': 0.877}), (12, 19, {'w': 0.258}), (13, 2, {'w': 0.66}), (13, 5, {'w': 0.817}),
         (13, 9, {'w': 0.555}), (13, 10, {'w': 0.53}), (13, 11, {'w': 0.242}), (13, 17, {'w': 0.093}),
         (14, 3, {'w': 0.897}), (14, 5, {'w': 0.9}), (14, 8, {'w': 0.633}), (14, 9, {'w': 0.339}),
         (14, 10, {'w': 0.349}), (14, 12, {'w': 0.726}), (14, 16, {'w': 0.897}), (14, 18, {'w': 0.887}),
         (15, 2, {'w': 0.78}), (15, 4, {'w': 0.642}), (15, 5, {'w': 0.084}), (15, 8, {'w': 0.162}),
         (15, 12, {'w': 0.899}), (15, 13, {'w': 0.606}), (16, 0, {'w': 0.009}), (16, 1, {'w': 0.101}),
         (16, 7, {'w': 0.664}), (16, 8, {'w': 0.005}), (16, 9, {'w': 0.161}), (16, 14, {'w': 0.549}),
         (17, 1, {'w': 0.692}), (17, 8, {'w': 0.652}), (17, 10, {'w': 0.224}), (17, 13, {'w': 0.712}),
         (17, 19, {'w': 0.237}), (18, 0, {'w': 0.325}), (18, 1, {'w': 0.746}), (18, 5, {'w': 0.65}),
         (18, 11, {'w': 0.849}), (18, 13, {'w': 0.658}), (18, 15, {'w': 0.568}), (18, 16, {'w': 0.094}),
         (19, 5, {'w': 0.368}), (19, 7, {'w': 0.265}), (19, 14, {'w': 0.244})])
    ),
    'info': "Large random generated graph",
    'num_of_bases': 2,
    'base0': (
        np.arange(20),
        np.array(
        [(0, 2, {'w': 0.00031}), (0, 3, {'w': 0.00636}), (0, 4, {'w': 0.00314}), (0, 8, {'w': 0.00509}),
         (0, 10, {'w': 0.00908}), (0, 11, {'w': 0.00249}), (0, 13, {'w': 0.0041}), (0, 14, {'w': 0.00756}),
         (0, 17, {'w': 0.00229}), (1, 0, {'w': 0.00077}), (1, 5, {'w': 0.0029}), (1, 8, {'w': 0.00161}),
         (1, 9, {'w': 0.0093}), (2, 4, {'w': 0.00808}), (2, 5, {'w': 0.00633}), (2, 6, {'w': 0.00871}),
         (2, 7, {'w': 0.00804}), (2, 8, {'w': 0.00187}), (2, 9, {'w': 0.00893}), (2, 10, {'w': 0.00539}),
         (2, 14, {'w': 0.00807}), (2, 15, {'w': 0.00896}), (2, 19, {'w': 0.00318}), (3, 1, {'w': 0.0011}),
         (3, 10, {'w': 0.00228}), (3, 11, {'w': 0.00427}), (3, 13, {'w': 0.00818}), (3, 14, {'w': 0.00861}),
         (4, 2, {'w': 0.00007}), (4, 3, {'w': 0.00511}), (4, 6, {'w': 0.00417}), (4, 10, {'w': 0.00222}),
         (4, 13, {'w': 0.0012}), (4, 14, {'w': 0.00338}), (4, 15, {'w': 0.00943}), (4, 19, {'w': 0.00323}),
         (5, 6, {'w': 0.00519}), (5, 10, {'w': 0.00703}), (5, 12, {'w': 0.00364}), (5, 17, {'w': 0.00972}),
         (5, 19, {'w': 0.00962}), (6, 2, {'w': 0.00252}), (6, 5, {'w': 0.00497}), (6, 11, {'w': 0.00301}),
         (6, 13, {'w': 0.00285}), (6, 18, {'w': 0.00037}), (7, 1, {'w': 0.0061}), (7, 3, {'w': 0.00503}),
         (7, 6, {'w': 0.00051}), (7, 10, {'w': 0.00279}), (7, 13, {'w': 0.00908}), (7, 16, {'w': 0.0024}),
         (8, 2, {'w': 0.00145}), (8, 3, {'w': 0.00489}), (8, 6, {'w': 0.00986}), (8, 7, {'w': 0.00242}),
         (8, 9, {'w': 0.00672}), (8, 11, {'w': 0.00762}), (8, 14, {'w': 0.00238}), (8, 15, {'w': 0.00728}),
         (8, 17, {'w': 0.00368}), (8, 18, {'w': 0.00632}), (9, 4, {'w': 0.00634}), (9, 5, {'w': 0.00536}),
         (9, 13, {'w': 0.0009}), (9, 17, {'w': 0.00835}), (9, 18, {'w': 0.00321}), (10, 1, {'w': 0.00187}),
         (10, 2, {'w': 0.00041}), (10, 7, {'w': 0.00591}), (10, 14, {'w': 0.00678}), (10, 16, {'w': 0.00017}),
         (10, 18, {'w': 0.00512}), (11, 1, {'w': 0.00226}), (11, 9, {'w': 0.00645}), (11, 10, {'w': 0.00174}),
         (11, 16, {'w': 0.00691}), (12, 0, {'w': 0.00387}), (12, 2, {'w': 0.00937}), (12, 3, {'w': 0.00138}),
         (12, 6, {'w': 0.00341}), (12, 7, {'w': 0.00113}), (12, 9, {'w': 0.00925}), (12, 17, {'w': 0.00877}),
         (12, 19, {'w': 0.00258}), (13, 2, {'w': 0.0066}), (13, 5, {'w': 0.00817}), (13, 9, {'w': 0.00555}),
         (13, 10, {'w': 0.0053}), (13, 11, {'w': 0.00242}), (13, 17, {'w': 0.00093}), (14, 3, {'w': 0.00897}),
         (14, 5, {'w': 0.00900}), (14, 8, {'w': 0.00633}), (14, 9, {'w': 0.00339}), (14, 10, {'w': 0.00349}),
         (14, 12, {'w': 0.00726}), (14, 16, {'w': 0.00897}), (14, 18, {'w': 0.00887}), (15, 2, {'w': 0.00780}),
         (15, 4, {'w': 0.00642}), (15, 5, {'w': 0.00084}), (15, 8, {'w': 0.00162}), (15, 12, {'w': 0.00899}),
         (15, 13, {'w': 0.00606}), (16, 0, {'w': 0.00009}), (16, 1, {'w': 0.00101}), (16, 7, {'w': 0.00664}),
         (16, 8, {'w': 0.00005}), (16, 9, {'w': 0.00161}), (16, 14, {'w': 0.00549}), (17, 1, {'w': 0.00692}),
         (17, 8, {'w': 0.00652}), (17, 10, {'w': 0.00224}), (17, 13, {'w': 0.00712}), (17, 19, {'w': 0.00237}),
         (18, 0, {'w': 0.00325}), (18, 1, {'w': 0.00746}), (18, 5, {'w': 0.0065}), (18, 11, {'w': 0.00849}),
         (18, 13, {'w': 0.00658}), (18, 15, {'w': 0.00568}), (18, 16, {'w': 0.00094}), (19, 5, {'w': 0.00368}),
         (19, 7, {'w': 0.00265}), (19, 14, {'w': 0.00244})])
    ),
    'base1': (
        np.arange(20),
        np.array(
        [(0, 2, {'w': 0.001}), (0, 3, {'w': 0.001}), (0, 4, {'w': 0.001}), (0, 8, {'w': 0.001}), (0, 10, {'w': 0.001}),
         (0, 11, {'w': 0.001}), (0, 13, {'w': 0.001}), (0, 14, {'w': 0.001}), (0, 17, {'w': 0.001}),
         (1, 0, {'w': 0.001}), (1, 5, {'w': 0.001}), (1, 8, {'w': 0.001}), (1, 9, {'w': 0.001}), (2, 4, {'w': 0.001}),
         (2, 5, {'w': 0.001}), (2, 6, {'w': 0.001}), (2, 7, {'w': 0.001}), (2, 8, {'w': 0.001}), (2, 9, {'w': 0.001}),
         (2, 10, {'w': 0.001}), (2, 14, {'w': 0.001}), (2, 15, {'w': 0.001}), (2, 19, {'w': 0.001}),
         (3, 1, {'w': 0.001}), (3, 10, {'w': 0.001}), (3, 11, {'w': 0.001}), (3, 13, {'w': 0.001}),
         (3, 14, {'w': 0.001}), (4, 2, {'w': 0.001}), (4, 3, {'w': 0.001}), (4, 6, {'w': 0.001}), (4, 10, {'w': 0.001}),
         (4, 13, {'w': 0.001}), (4, 14, {'w': 0.001}), (4, 15, {'w': 0.001}), (4, 19, {'w': 0.001}),
         (5, 6, {'w': 0.001}), (5, 10, {'w': 0.001}), (5, 12, {'w': 0.001}), (5, 17, {'w': 0.001}),
         (5, 19, {'w': 0.001}), (6, 2, {'w': 0.001}), (6, 5, {'w': 0.001}), (6, 11, {'w': 0.001}),
         (6, 13, {'w': 0.001}), (6, 18, {'w': 0.001}), (7, 1, {'w': 0.001}), (7, 3, {'w': 0.001}), (7, 6, {'w': 0.001}),
         (7, 10, {'w': 0.001}), (7, 13, {'w': 0.001}), (7, 16, {'w': 0.001}), (8, 2, {'w': 0.001}),
         (8, 3, {'w': 0.001}), (8, 6, {'w': 0.001}), (8, 7, {'w': 0.001}), (8, 9, {'w': 0.001}), (8, 11, {'w': 0.001}),
         (8, 14, {'w': 0.001}), (8, 15, {'w': 0.001}), (8, 17, {'w': 0.001}), (8, 18, {'w': 0.001}),
         (9, 4, {'w': 0.001}), (9, 5, {'w': 0.001}), (9, 13, {'w': 0.001}), (9, 17, {'w': 0.001}),
         (9, 18, {'w': 0.001}), (10, 1, {'w': 0.001}), (10, 2, {'w': 0.001}), (10, 7, {'w': 0.001}),
         (10, 14, {'w': 0.001}), (10, 16, {'w': 0.001}), (10, 18, {'w': 0.001}), (11, 1, {'w': 0.001}),
         (11, 9, {'w': 0.001}), (11, 10, {'w': 0.001}), (11, 16, {'w': 0.001}), (12, 0, {'w': 0.001}),
         (12, 2, {'w': 0.001}), (12, 3, {'w': 0.001}), (12, 6, {'w': 0.001}), (12, 7, {'w': 0.001}),
         (12, 9, {'w': 0.001}), (12, 17, {'w': 0.001}), (12, 19, {'w': 0.001}), (13, 2, {'w': 0.001}),
         (13, 5, {'w': 0.001}), (13, 9, {'w': 0.001}), (13, 10, {'w': 0.001}), (13, 11, {'w': 0.001}),
         (13, 17, {'w': 0.001}), (14, 3, {'w': 0.001}), (14, 5, {'w': 0.001}), (14, 8, {'w': 0.001}),
         (14, 9, {'w': 0.001}), (14, 10, {'w': 0.001}), (14, 12, {'w': 0.001}), (14, 16, {'w': 0.001}),
         (14, 18, {'w': 0.001}), (15, 2, {'w': 0.001}), (15, 4, {'w': 0.001}), (15, 5, {'w': 0.001}),
         (15, 8, {'w': 0.001}), (15, 12, {'w': 0.001}), (15, 13, {'w': 0.001}), (16, 0, {'w': 0.001}),
         (16, 1, {'w': 0.001}), (16, 7, {'w': 0.001}), (16, 8, {'w': 0.001}), (16, 9, {'w': 0.001}),
         (16, 14, {'w': 0.001}), (17, 1, {'w': 0.001}), (17, 8, {'w': 0.001}), (17, 10, {'w': 0.001}),
         (17, 13, {'w': 0.001}), (17, 19, {'w': 0.001}), (18, 0, {'w': 0.001}), (18, 1, {'w': 0.001}),
         (18, 5, {'w': 0.001}), (18, 11, {'w': 0.001}), (18, 13, {'w': 0.001}), (18, 15, {'w': 0.001}),
         (18, 16, {'w': 0.001}), (19, 5, {'w': 0.001}), (19, 7, {'w': 0.001}), (19, 14, {'w': 0.001})])
    ),
}

MF_CASES = [MF_CASE1, MF_CASE2, MF_CASE3]

# ================= Knapsack Problem =================

KS_CASE1 = {
    'input': (
        np.array([[3., 5.], [2., 3.], [4., 6.], [2., 2.], [2., 4.]]),
        10.
    ),
    'info': "Small number of items without tie",
    'num_of_bases': 2,
    'base0': (np.array([[0.03, 0.05], [0.02, 0.03], [0.04, 0.06], [0.02, 0.02], [0.02, 0.04]]), 0.1),
    'base1': (np.array([[0.26, 0.4], [0.26, 0.4], [0.26, 0.4], [0.26, 0.4], [0.26, 0.4]]), 1.),
}

KS_CASE2 = {
    'input': (
        np.array([[4., 4.], [4., 6.], [1., 3.], [3., 3.]]),
        10.
    ),
    'info': "Small number of items with tie",
    'num_of_bases': 2,
    'base0': (np.array([[0.04, 0.04], [0.04, 0.06], [0.01, 0.03], [0.03, 0.03]]), 0.1),
    'base1': (np.array([[0.3, 0.5], [0.3, 0.5], [0.3, 0.5], [0.3, 0.5]]), 1.),
}

KS_CASE3 = {
    'input': (
        np.array([[50., 20.], [15., 10.], [3., 5.], [2., 3.], [4., 6.], [2., 2.], [3., 4.]]),
        10.
    ),
    'info': "Two additional items which are too large, but very valuable",
    'num_of_bases': 2,
    'base0': (np.array([[0.5, 0.2], [0.15, 0.1], [0.03, 0.05], [0.02, 0.03], [0.04, 0.06], [0.02, 0.02], [0.03, 0.04]]),
              0.1),
    'base1': (np.array([[1.13, 1.], [1.13, 1.], [1.13, 1.], [1.13, 1.], [1.13, 1.], [1.13, 1.], [1.13, 1.]]), 1.),
}

KS_CASE4 = {
    'input': (
        np.array([[0.3745401188473625, 0.9507143064099162], [0.7319939418114051, 0.5986584841970366],
               [0.15601864044243652, 0.15599452033620265], [0.05808361216819946, 0.8661761457749352],
               [0.6011150117432088, 0.7080725777960455], [0.020584494295802447, 0.9699098521619943],
               [0.8324426408004217, 0.21233911067827616], [0.18182496720710062, 0.18340450985343382],
               [0.3042422429595377, 0.5247564316322378], [0.43194501864211576, 0.2912291401980419],
               [0.6118528947223795, 0.13949386065204183], [0.29214464853521815, 0.3663618432936917],
               [0.45606998421703593, 0.7851759613930136], [0.19967378215835974, 0.5142344384136116],
               [0.5924145688620425, 0.046450412719997725], [0.6075448519014384, 0.17052412368729153],
               [0.06505159298527952, 0.9488855372533332], [0.9656320330745594, 0.8083973481164611],
               [0.3046137691733707, 0.09767211400638387], [0.6842330265121569, 0.4401524937396013],
               [0.12203823484477883, 0.4951769101112702], [0.034388521115218396, 0.9093204020787821],
               [0.2587799816000169, 0.662522284353982], [0.31171107608941095, 0.5200680211778108],
               [0.5467102793432796, 0.18485445552552704], [0.9695846277645586, 0.7751328233611146],
               [0.9394989415641891, 0.8948273504276488], [0.5978999788110851, 0.9218742350231168],
               [0.0884925020519195, 0.1959828624191452], [0.045227288910538066, 0.32533033076326434],
               [0.388677289689482, 0.2713490317738959], [0.8287375091519293, 0.3567533266935893],
               [0.28093450968738076, 0.5426960831582485], [0.14092422497476265, 0.8021969807540397],
               [0.07455064367977082, 0.9868869366005173], [0.7722447692966574, 0.1987156815341724],
               [0.005522117123602399, 0.8154614284548342], [0.7068573438476171, 0.7290071680409873],
               [0.7712703466859457, 0.07404465173409036], [0.3584657285442726, 0.11586905952512971],
               [0.8631034258755935, 0.6232981268275579], [0.3308980248526492, 0.06355835028602363],
               [0.3109823217156622, 0.32518332202674705], [0.7296061783380641, 0.6375574713552131],
               [0.8872127425763265, 0.4722149251619493], [0.1195942459383017, 0.713244787222995],
               [0.7607850486168974, 0.5612771975694962], [0.770967179954561, 0.49379559636439074],
               [0.5227328293819941, 0.42754101835854963], [0.02541912674409519, 0.10789142699330445]]),
        15.
    ),
    'info': "Large random generated problem",
    'num_of_bases': 2,
    'base0': (
        np.array([
            [0.003745401188473625, 0.009507143064099161], [0.007319939418114051, 0.005986584841970366],
            [0.0015601864044243652, 0.0015599452033620265], [0.0005808361216819946, 0.008661761457749351],
            [0.006011150117432088, 0.007080725777960455], [0.00020584494295802447, 0.009699098521619943],
            [0.008324426408004217, 0.0021233911067827615], [0.0018182496720710061, 0.001834045098534338],
            [0.0030424224295953774, 0.005247564316322379], [0.004319450186421158, 0.002912291401980419],
            [0.006118528947223795, 0.0013949386065204184], [0.0029214464853521815, 0.003663618432936917],
            [0.004560699842170359, 0.007851759613930136], [0.0019967378215835973, 0.005142344384136116],
            [0.005924145688620425, 0.00046450412719997725], [0.006075448519014383, 0.0017052412368729153],
            [0.0006505159298527952, 0.009488855372533333], [0.009656320330745594, 0.008083973481164611],
            [0.0030461376917337067, 0.0009767211400638386], [0.0068423302651215686, 0.004401524937396013],
            [0.0012203823484477883, 0.0049517691011127015], [0.00034388521115218395, 0.00909320402078782],
            [0.0025877998160001693, 0.00662522284353982], [0.0031171107608941096, 0.005200680211778108],
            [0.005467102793432797, 0.0018485445552552703], [0.009695846277645586, 0.007751328233611145],
            [0.009394989415641892, 0.008948273504276488], [0.005978999788110851, 0.009218742350231169],
            [0.000884925020519195, 0.001959828624191452], [0.00045227288910538066, 0.0032533033076326432],
            [0.0038867728968948203, 0.002713490317738959], [0.008287375091519293, 0.003567533266935893],
            [0.0028093450968738076, 0.005426960831582485], [0.0014092422497476264, 0.008021969807540396],
            [0.0007455064367977082, 0.009868869366005173], [0.007722447692966574, 0.001987156815341724],
            [5.522117123602399e-05, 0.00815461428454834], [0.007068573438476171, 0.007290071680409873],
            [0.007712703466859458, 0.0007404465173409036], [0.003584657285442726, 0.0011586905952512972],
            [0.008631034258755936, 0.006232981268275579], [0.003308980248526492, 0.0006355835028602363],
            [0.003109823217156622, 0.0032518332202674705], [0.007296061783380641, 0.006375574713552132],
            [0.008872127425763265, 0.004722149251619493], [0.001195942459383017, 0.00713244787222995],
            [0.007607850486168974, 0.005612771975694962], [0.00770967179954561, 0.004937955963643908],
            [0.0052273282938199404, 0.004275410183585496], [0.0002541912674409519, 0.0010789142699330445],
            ]),
        0.15
    ),
    'base1': (
        np.array([
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885],
            [0.044071677759659984, 0.049964470915981885], [0.044071677759659984, 0.049964470915981885]
            ]),
        1.5
    ),
}

KS_CASES = [KS_CASE1, KS_CASE2, KS_CASE3, KS_CASE4]

# ================= Shortest Path Problem =================
# baselines for integrated gradients which occur in multiple cases:
all_same_base = (np.arange(5),
                 np.array([(0, 1, {'w': 0.01}), (0, 2, {'w': 0.01}), (1, 3, {'w': 0.01}), (1, 4, {'w': 0.01}),
                           (2, 3, {'w': 0.01}), (3, 4, {'w': 0.01})])
                 )

SP_CASE1 = {
    'input': (
        np.arange(5),
        np.array([(0, 1, {'w': 0.5}), (0, 2, {'w': 2.0}), (1, 3, {'w': 1.8}), (1, 4, {'w': 4.2}), (2, 3, {'w': 1.2}),
                  (3, 4, {'w': 2.1})])
    ),
    'info': "Small graph without tie",
    'num_of_bases': 2,
    'base0': (np.arange(5),
              np.array([(0, 1, {'w': 0.005}), (0, 2, {'w': 0.02}), (1, 3, {'w': 0.018}), (1, 4, {'w': 0.042}),
                        (2, 3, {'w': 0.012}), (3, 4, {'w': 0.021})])
              ),
    'base1': all_same_base,
}

SP_CASE2 = {
    'input': (
        np.arange(5),
        np.array([(0, 1, {'w': 0.5}), (0, 2, {'w': 2.0}), (1, 3, {'w': 1.8}), (1, 4, {'w': 3.9}), (2, 3, {'w': 1.2}),
                  (3, 4, {'w': 2.1})]),
    ),
    'info': "Small graph with tie",
    'num_of_bases': 2,
    'base0': (np.arange(5),
              np.array([(0, 1, {'w': 0.005}), (0, 2, {'w': 0.02}), (1, 3, {'w': 0.018}), (1, 4, {'w': 0.039}),
                        (2, 3, {'w': 0.012}), (3, 4, {'w': 0.021})])
              ),
    'base1': all_same_base,
}

SP_CASES = [SP_CASE1, SP_CASE2]

# ================= Collection of all cases =================
PROBLEM_CASES = {
    'blp': BLP_CASES,
    'mf': MF_CASES,
    'ks': KS_CASES,
    'sp': SP_CASES,
}
